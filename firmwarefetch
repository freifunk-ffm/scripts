#!/bin/bash

if [ -z "$1" ] ;  then
        echo "Bitte einen FW-Branch (stable, test, dev, babel-dev) angeben:"
        echo
        exit 1
fi

BRANCH=${1} # dev, stable, test...


#####################################
# Lokalisierungen ab hier
#####################################

# Haupt-Link auf Remote-Verzeichnis mit neuer *.tar.gz Firmware-Datei?
REMOTEPATH="http://jenkins.ffm.freifunk.net/jenkins/job/ffm_gluon-${BRANCH}/ws/wspace/output/images/"

# Haupt-Link auf Remote-Verzeichnis, in der sich die Datei der Firmware-Versionsinformation befindet?
REMOTEVERSIONINFOPATH="http://jenkins.ffm.freifunk.net/jenkins/job/ffm_gluon-${BRANCH}/ws/wspace/output/images/"

# Wie lautet der Dateiname der Firmware-Versionsinformation
VERSIONINFOFILENAME="version"

# Haupt-Pfad zum lokalen Firmware-Ablageordner
LOCALMAINPATH="/var/www/files/firmware"

#####################################
# Bitte ab hier nichts mehr aendern
#####################################


LOCALBRANCHPATH="${LOCALMAINPATH}/${BRANCH}"

CurrentVersion=""
NewVersion=""

ErrorCheck()
{
if [[ $1 -ne 0 ]] ; then
 echo
 echo "Firmwarefetch Error: "$2
 echo
 # Skript-Abbruch
 exit 1
fi
}


GetNewVersionInfo()
{
echo "Firmwarefetch: GetNewVersionInfo..."
NewVersion=$(wget --no-check-certificate -O - $REMOTEVERSIONINFOPATH/$VERSIONINFOFILENAME)
ErrorCheck $? "No remote firmware version information found!"
}

GetCurrentVersionInfo()
{
echo "Firmwarefetch: GetCurrentVersionInfo..."
CurrentVersion=$(cat $LOCALBRANCHPATH/$VERSIONINFOFILENAME)
if [[ $? -ne 0 ]]; then
 CurrentVersion="unknown_at_"$(date +%Y-%m-%d_%H:%M)
fi
}

BackupCurrentFirmware()
{
echo "Firmwarefetch: BackupCurrentFirmware..."
# Neues Backupverzeichnisse anlegen
mkdir -p  $LOCALBRANCHPATH/factory/$CurrentVersion
mkdir -p  $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
mkdir -p  $LOCALBRANCHPATH/sysupgrade/$CurrentVersion/modules

# Alle alten Binaries verschieben
mv $LOCALBRANCHPATH/factory/gluon-ffffm-* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/sysupgrade/*.manifest $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
mv $LOCALBRANCHPATH/sysupgrade/gluon-ffffm-* $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
#mv $LOCALBRANCHPATH/sysupgrade/modules $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
cp -rf $LOCALBRANCHPATH/sysupgrade/modules/gluon-ffffm-$CurrentVersion $LOCALBRANCHPATH/sysupgrade/$CurrentVersion/modules

# Alte Hash- und Info-Files in 'factory' verschieben
mv $LOCALBRANCHPATH/MD5* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/SHA256* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/ecdsa-key* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/$VERSIONINFOFILENAME $LOCALBRANCHPATH/factory/$CurrentVersion
}

GetNewFirmware()
{
echo "Firmwarefetch: GetNewFirmware..."
wget --no-check-certificate -O - $REMOTEPATH/gluon-ffffm-$NewVersion.tar.gz | tar xvz -C $LOCALBRANCHPATH
ErrorCheck $? "Can't download remote firmware archiv!"
}

# Los geht's !

GetNewVersionInfo
GetCurrentVersionInfo
echo "Firmwarefetch: Current firmware version: "$CurrentVersion
if [[ $CurrentVersion < $NewVersion ]]; then
  echo "Firmwarefetch: New firmware version: "$NewVersion
  BackupCurrentFirmware
  GetNewFirmware
else
  echo "Firmwarefetch: No new Firmwareversion found"
fi

echo "Firmwarefetch: Done!"

exit 0

