#!/bin/bash

if [ -z "$1" ] ;  then
        echo "Bitte den Verzeichnisnamen des lokalen Ablageortes (stable, test, dev, babel-dev) angeben."
        echo "Hiermit wird der Haupt-Pfad zum lokalen Firmware-Ablageordner vervollständigt." 
        echo 
        exit 1
fi

BRANCH=${1} # dev, stable, test...


#####################################
# Lokalisierungen ab hier
#####################################

### 
# Da der Ablageordner nicht immer identisch zum Fetch- bzw. Download-Link ist,
# wird hier die Möglichkeit geschaffen, einen unabhängigen Fetch-Teil-Pfad anzugeben.
# Wird die Firmware z.B. durch Jenkins gebaut, so könnte dann der optionale zweite Parameter
# der Name des Jenkins-Projektes sein.
#
# BEGIN - Zweitparameteranalyse
if [ "$2" ] ;  then
   DL_PATH_PART=${2}
else
   DL_PATH_PART=${1}
fi
# ENDE - Zweitparameteranalyse
###

# Haupt-Link auf Remote-Verzeichnis mit neuer *.tar.xz Firmware-Datei.
REMOTEPATH="https://2.dl.ffm.freifunk.net/FW-Archiv/ffffm-$DL_PATH_PART/"
# Babelhack                                     ^^^

# Haupt-Link auf Remote-Verzeichnis, in der sich die Datei der Firmware-Versionsinformation befindet.
REMOTEVERSIONINFOPATH=${REMOTEPATH}

# Wie lautet der Dateiname der Firmware-Versionsinformation
VERSIONINFOFILENAME="version"

# Haupt-Pfad zum lokalen Firmware-Ablageordner
LOCALMAINPATH="/var/www/files/firmware"

# Wieviele archivierte alte Versionen sollen vorgehalten bleiben?
BACKUP_KEEP_COUNTER=10

#####################################
# Bitte ab hier nichts mehr aendern
#####################################


LOCALBRANCHPATH="${LOCALMAINPATH}/${BRANCH}"

CurrentVersion=""
NewVersion=""

ErrorCheck()
{
if [[ $1 -ne 0 ]] ; then
 echo
 echo "Firmwarefetch Error: "$2
 echo
 # Skript-Abbruch
 exit 1
fi
}


GetNewVersionInfo()
{
echo "Firmwarefetch: GetNewVersionInfo..."
NewVersion=$(wget --no-check-certificate -O - $REMOTEVERSIONINFOPATH/$VERSIONINFOFILENAME)
ErrorCheck $? "No remote firmware version information found!"
}

GetCurrentVersionInfo()
{
echo "Firmwarefetch: GetCurrentVersionInfo..."
CurrentVersion=$(cat $LOCALBRANCHPATH/$VERSIONINFOFILENAME)
if [[ $? -ne 0 ]]; then
 CurrentVersion="unknown_at_"$(date +%Y-%m-%d_%H:%M)
fi
}

BackupCurrentFirmware()
{
echo "Firmwarefetch: BackupCurrentFirmware..."
# Neues Backupverzeichnisse anlegen
mkdir -p  $LOCALBRANCHPATH/factory/$CurrentVersion
mkdir -p  $LOCALBRANCHPATH/other/$CurrentVersion
mkdir -p  $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
mkdir -p  $LOCALBRANCHPATH/sysupgrade/$CurrentVersion/modules

# Alle alten Binaries verschieben
mv $LOCALBRANCHPATH/factory/gluon-ffffm-* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/other/gluon-ffffm-* $LOCALBRANCHPATH/other/$CurrentVersion
mv $LOCALBRANCHPATH/sysupgrade/*.manifest $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
mv $LOCALBRANCHPATH/sysupgrade/gluon-ffffm-* $LOCALBRANCHPATH/sysupgrade/$CurrentVersion
# Wenn noch alte FW im Feld läuft, werden die Module an aktuller stelle noch benötigt. 
# Daher werden die aktuellen Module nur weg kopiert, und nicht komplett verschoben.
cp -rf $LOCALBRANCHPATH/sysupgrade/modules/gluon-ffffm-$CurrentVersion $LOCALBRANCHPATH/sysupgrade/$CurrentVersion/modules

# Alte Hash- und Info-Files in 'factory' verschieben
mv $LOCALBRANCHPATH/SHA512* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/SHA256* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/ecdsa-key* $LOCALBRANCHPATH/factory/$CurrentVersion
mv $LOCALBRANCHPATH/$VERSIONINFOFILENAME $LOCALBRANCHPATH/factory/$CurrentVersion
}

RemoveOlderBackups()
{
echo "Firmwarefetch: Keep the last $BACKUP_KEEP_COUNTER backups..."
find $LOCALBRANCHPATH/factory -type d -name "v*" -printf "%T@ %Tc %p\n" | sort -n|rev |cut -d" " -f1|rev|head -n -$BACKUP_KEEP_COUNTER|xargs rm -rf
ErrorCheck $? "Something went wrong during keeping the factory backups!"

find $LOCALBRANCHPATH/other -type d -name "v*" -printf "%T@ %Tc %p\n" | sort -n|rev |cut -d" " -f1|rev|head -n -$BACKUP_KEEP_COUNTER|xargs rm -rf
ErrorCheck $? "Something went wrong during keeping the other backups!"

find $LOCALBRANCHPATH/sysupgrade -type d -name "v*" -printf "%T@ %Tc %p\n" | sort -n|rev |cut -d" " -f1|rev|head -n -$BACKUP_KEEP_COUNTER|xargs rm -rf
ErrorCheck $? "Something went wrong during keeping the sysupgrade backups!"

find $LOCALBRANCHPATH/sysupgrade/modules -type d -name "gluon-*" -printf "%T@ %Tc %p\n" | sort -n|rev |cut -d" " -f1|rev|head -n -$BACKUP_KEEP_COUNTER|xargs rm -rf
ErrorCheck $? "Something went wrong during keeping the module backups!"
}

GetNewFirmware()
{
echo "Firmwarefetch: GetNewFirmware..."
wget --tries=1000 --no-check-certificate -O - $REMOTEPATH/gluon-$NewVersion.tar.xz | tar xvJ -C $LOCALBRANCHPATH
ErrorCheck $? "Can't download remote firmware archiv!"
}

# Los geht's !

GetNewVersionInfo
GetCurrentVersionInfo
echo "Firmwarefetch: Current firmware version: "$CurrentVersion

HIGHESTVERSION=$(printf '%s\n' $CurrentVersion $NewVersion | sort -V | tail -n 1)

if [[ "$CurrentVersion" = "$HIGHESTVERSION" ]]; then
  echo "Firmwarefetch: No new Firmwareversion found"
else
  echo "Firmwarefetch: New firmware version found: "$NewVersion
  BackupCurrentFirmware
  RemoveOlderBackups
  GetNewFirmware
fi

echo "Firmwarefetch: Done!"

exit 0

